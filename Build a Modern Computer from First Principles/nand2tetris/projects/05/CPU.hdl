// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
		
		
    PARTS:
    // Put your code here:
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Muxleftout);
	Not(in=instruction[15],out=Noti);
	Or(a=Noti,b=instruction[5],out=loadA);
    ARegister(in=Muxleftout,load=loadA,out=Aout,out[0..14]=addressM);
	And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=ALUout,load=loadD,out=Dout);
	And(a=instruction[15],b=instruction[12],out=selMuxright);
    Mux16(a=Aout,b=inM,sel=selMuxright,out=Muxrightout);
    ALU(x=Dout,y=Muxrightout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zero,ng=neg);
    And(a=instruction[15],b=instruction[3],out=writeM);
	
	Not(in=instruction[0],out=notj3);
	Not(in=instruction[1],out=notj2);
	Not(in=instruction[2],out=notj1);
	Not(in=zero,out=notzero);
	Not(in=neg,out=notneg);
	
	Or8Way(in[0]=zero,in[1]=neg,in[2]=instruction[2],in[3]=instruction[1],in[4]=notj3,out=a);
	Or8Way(in[0]=notzero,in[1]=neg,in[2]=instruction[2],in[3]=notj2,in[4]=instruction[0],out=b);
	Or8Way(in[1]=neg,in[2]=instruction[2],in[3]=notj2,in[4]=notj3,out=c);
	Or8Way(in[0]=zero,in[1]=notneg,in[2]=notj1,in[3]=instruction[1],in[4]=instruction[0],out=d);
	Or8Way(in[0]=zero,in[2]=notj1,in[3]=instruction[1],in[4]=notj3,out=e);
	Or(a=zero,b=neg,out=notpositive);
	Not(in=notpositive,out=positive);
	Or8Way(in[0]=positive,in[2]=notj1,in[3]=notj2,in[4]=instruction[0],out=f);
	Or8Way(in[2]=notj1,in[3]=notj2,in[4]=notj3,out=g);
	Not16(in[0]=a,in[1]=b,in[2]=c,in[3]=d,in[4]=e,in[5]=f,in[6]=g,out[0..6]=allnotjumpzero);
	Or8Way(in[0..6]=allnotjumpzero,in[7]=false,out=jump);
	And(a=instruction[15],b=jump,out=cjump);
	Not(in=cjump,out=incr);
	PC(in=Aout,load=cjump,inc=incr,reset=reset,out[0..14]=pc[0..14]);
}